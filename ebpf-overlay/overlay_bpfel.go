// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type overlayEbpfNs struct{ Ip uint32 }

type overlayIpPortPair struct {
	Ip   uint32
	Port uint16
	_    [2]byte
}

// loadOverlay returns the embedded CollectionSpec for overlay.
func loadOverlay() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_OverlayBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load overlay: %w", err)
	}

	return spec, err
}

// loadOverlayObjects loads overlay and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*overlayObjects
//	*overlayPrograms
//	*overlayMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadOverlayObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadOverlay()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// overlaySpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type overlaySpecs struct {
	overlayProgramSpecs
	overlayMapSpecs
	overlayVariableSpecs
}

// overlayProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type overlayProgramSpecs struct {
	HandleGetsocknameEntry *ebpf.ProgramSpec `ebpf:"handle_getsockname_entry"`
	OnProcessExec          *ebpf.ProgramSpec `ebpf:"on_process_exec"`
	OnProcessExit          *ebpf.ProgramSpec `ebpf:"on_process_exit"`
	TpSysEnterBind         *ebpf.ProgramSpec `ebpf:"tp_sys_enter_bind"`
	TpSysEnterConnect      *ebpf.ProgramSpec `ebpf:"tp_sys_enter_connect"`
	TpSysEnterGetsockname  *ebpf.ProgramSpec `ebpf:"tp_sys_enter_getsockname"`
}

// overlayMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type overlayMapSpecs struct {
	EbpfNsMap   *ebpf.MapSpec `ebpf:"ebpf_ns_map"`
	EnidsMap    *ebpf.MapSpec `ebpf:"enids_map"`
	HostToNsMap *ebpf.MapSpec `ebpf:"host_to_ns_map"`
	NsToHostMap *ebpf.MapSpec `ebpf:"ns_to_host_map"`
}

// overlayVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type overlayVariableSpecs struct {
}

// overlayObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadOverlayObjects or ebpf.CollectionSpec.LoadAndAssign.
type overlayObjects struct {
	overlayPrograms
	overlayMaps
	overlayVariables
}

func (o *overlayObjects) Close() error {
	return _OverlayClose(
		&o.overlayPrograms,
		&o.overlayMaps,
	)
}

// overlayMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadOverlayObjects or ebpf.CollectionSpec.LoadAndAssign.
type overlayMaps struct {
	EbpfNsMap   *ebpf.Map `ebpf:"ebpf_ns_map"`
	EnidsMap    *ebpf.Map `ebpf:"enids_map"`
	HostToNsMap *ebpf.Map `ebpf:"host_to_ns_map"`
	NsToHostMap *ebpf.Map `ebpf:"ns_to_host_map"`
}

func (m *overlayMaps) Close() error {
	return _OverlayClose(
		m.EbpfNsMap,
		m.EnidsMap,
		m.HostToNsMap,
		m.NsToHostMap,
	)
}

// overlayVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadOverlayObjects or ebpf.CollectionSpec.LoadAndAssign.
type overlayVariables struct {
}

// overlayPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadOverlayObjects or ebpf.CollectionSpec.LoadAndAssign.
type overlayPrograms struct {
	HandleGetsocknameEntry *ebpf.Program `ebpf:"handle_getsockname_entry"`
	OnProcessExec          *ebpf.Program `ebpf:"on_process_exec"`
	OnProcessExit          *ebpf.Program `ebpf:"on_process_exit"`
	TpSysEnterBind         *ebpf.Program `ebpf:"tp_sys_enter_bind"`
	TpSysEnterConnect      *ebpf.Program `ebpf:"tp_sys_enter_connect"`
	TpSysEnterGetsockname  *ebpf.Program `ebpf:"tp_sys_enter_getsockname"`
}

func (p *overlayPrograms) Close() error {
	return _OverlayClose(
		p.HandleGetsocknameEntry,
		p.OnProcessExec,
		p.OnProcessExit,
		p.TpSysEnterBind,
		p.TpSysEnterConnect,
		p.TpSysEnterGetsockname,
	)
}

func _OverlayClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed overlay_bpfel.o
var _OverlayBytes []byte
